package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@CrossOrigin("*")
@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private ClienteRepository userRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String nome, @RequestParam String email, @RequestParam String cpf) 
		  {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Cliente n = new Cliente();
    n.setNome(nome);
    n.setEmail(email);
    n.setCpf(cpf);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping
  //(path="/all")
  public @ResponseBody Iterable<Cliente> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }

@DeleteMapping(path="/delete/{id}")
public @ResponseBody String deleteById(@PathVariable Integer id) {
  // This returns a JSON or XML with this user
	  
	  if (userRepository.findById(id) == null) {
		  return "Não encontrado";
	  }
	  userRepository.deleteById(id);
	  return "Removido";
	  }
@PutMapping(path="/update/{id}")
public @ResponseBody String PutById(@PathVariable Integer id, @RequestBody Cliente cliente) {
  // This returns a JSON or XML with this user
	
	  if (userRepository.findById(id) == null) {
		  return "Não encontrado";
	  }
	  
	  	Cliente n = userRepository.findById(id).get();
	    n.setNome(cliente.getNome());
	    n.setEmail(cliente.getEmail());
	    n.setCpf(cliente.getCpf());
	    userRepository.save(n);
	    return "Salvo";
}

}











