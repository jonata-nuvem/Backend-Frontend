package com.example.accessingdatamysql;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

//liberar acesso de outros sites//
@CrossOrigin("*")

@Controller // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private ClienteRepository userRepository;

	/////// criar/////
	@PostMapping
	@ResponseStatus(code = HttpStatus.CREATED) // (path="/add") // Map ONLY POST Requests
		public @ResponseBody String gravarNovo(@RequestBody Cliente cliente) {
		userRepository.save(cliente);
		return "Salvo!";
	}

//	estrutura que retorna um cliente por id//
	@GetMapping(path = "/{id}")
	public @ResponseBody Optional<Cliente> getClienteById(@PathVariable("id") Integer id) {
		return userRepository.findById(id);
	}
	
	
	/////////// atualizar///////////////////////////////////

//a partir do id repassado pelo cliente na URl, os dados do cliente são atualizados//
	@PutMapping(path = "/update/{id}")
	public @ResponseBody String PutById(@RequestBody Cliente cliente,
			@PathVariable("id") Integer id) {

		if (userRepository.existsById(id)) {

			cliente.setId(id);
			userRepository.save(cliente);
			return "cliente atualizado agora";
		}
		return "Cliente não encontrado";

	}

	////////////////////////////////////////////

	@GetMapping
	public @ResponseBody Iterable<Cliente> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	//// //delete
	@DeleteMapping(path = "/{id}")
	@ResponseStatus(code = HttpStatus.ACCEPTED)
	public @ResponseBody String apagaCliente(@PathVariable Integer id) {
		userRepository.deleteById(id);
		return "Excluído!";
	}

}
